# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import database_pb2 as database__pb2


class DatabaseStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateUser = channel.unary_unary(
                '/Database/CreateUser',
                request_serializer=database__pb2.User.SerializeToString,
                response_deserializer=database__pb2.UserResponse.FromString,
                )
        self.GetUser = channel.unary_unary(
                '/Database/GetUser',
                request_serializer=database__pb2.User.SerializeToString,
                response_deserializer=database__pb2.UserResponse.FromString,
                )
        self.GetAllUsers = channel.unary_unary(
                '/Database/GetAllUsers',
                request_serializer=database__pb2.DBEmpty.SerializeToString,
                response_deserializer=database__pb2.UserResponse.FromString,
                )
        self.GetUserByUserName = channel.unary_unary(
                '/Database/GetUserByUserName',
                request_serializer=database__pb2.User.SerializeToString,
                response_deserializer=database__pb2.UserResponse.FromString,
                )
        self.CreateDataset = channel.unary_unary(
                '/Database/CreateDataset',
                request_serializer=database__pb2.Dataset.SerializeToString,
                response_deserializer=database__pb2.DatasetResp.FromString,
                )
        self.GetDatasetByName = channel.unary_unary(
                '/Database/GetDatasetByName',
                request_serializer=database__pb2.Dataset.SerializeToString,
                response_deserializer=database__pb2.DatasetResp.FromString,
                )
        self.RemoveDatasetByName = channel.unary_unary(
                '/Database/RemoveDatasetByName',
                request_serializer=database__pb2.Dataset.SerializeToString,
                response_deserializer=database__pb2.DatasetResp.FromString,
                )
        self.GetAllDatasets = channel.unary_unary(
                '/Database/GetAllDatasets',
                request_serializer=database__pb2.DBEmpty.SerializeToString,
                response_deserializer=database__pb2.DatasetResp.FromString,
                )
        self.GetDatasetById = channel.unary_unary(
                '/Database/GetDatasetById',
                request_serializer=database__pb2.Dataset.SerializeToString,
                response_deserializer=database__pb2.DatasetResp.FromString,
                )
        self.GetAllMetadataID = channel.unary_unary(
                '/Database/GetAllMetadataID',
                request_serializer=database__pb2.DatabaseEmpty.SerializeToString,
                response_deserializer=database__pb2.MetadataResponse.FromString,
                )
        self.GetDatasetOwner = channel.unary_unary(
                '/Database/GetDatasetOwner',
                request_serializer=database__pb2.Dataset.SerializeToString,
                response_deserializer=database__pb2.UserResponse.FromString,
                )
        self.CreateAPI = channel.unary_unary(
                '/Database/CreateAPI',
                request_serializer=database__pb2.API.SerializeToString,
                response_deserializer=database__pb2.APIResp.FromString,
                )
        self.GetAllAPIs = channel.unary_unary(
                '/Database/GetAllAPIs',
                request_serializer=database__pb2.DBEmpty.SerializeToString,
                response_deserializer=database__pb2.GetAPIResp.FromString,
                )
        self.CreateAPIDependency = channel.unary_unary(
                '/Database/CreateAPIDependency',
                request_serializer=database__pb2.APIDependency.SerializeToString,
                response_deserializer=database__pb2.APIDependencyResp.FromString,
                )
        self.GetAllDependencies = channel.unary_unary(
                '/Database/GetAllDependencies',
                request_serializer=database__pb2.DBEmpty.SerializeToString,
                response_deserializer=database__pb2.APIDependencyResp.FromString,
                )
        self.CreatePolicy = channel.unary_unary(
                '/Database/CreatePolicy',
                request_serializer=database__pb2.Policy.SerializeToString,
                response_deserializer=database__pb2.PolicyResp.FromString,
                )
        self.GetAllPolicies = channel.unary_unary(
                '/Database/GetAllPolicies',
                request_serializer=database__pb2.DBEmpty.SerializeToString,
                response_deserializer=database__pb2.PolicyResp.FromString,
                )
        self.CreateDerived = channel.unary_unary(
                '/Database/CreateDerived',
                request_serializer=database__pb2.Derived.SerializeToString,
                response_deserializer=database__pb2.DerivedResp.FromString,
                )


class DatabaseServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserByUserName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDataset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDatasetByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveDatasetByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllDatasets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDatasetById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllMetadataID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDatasetOwner(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAPI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllAPIs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAPIDependency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllDependencies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePolicy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllPolicies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDerived(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatabaseServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=database__pb2.User.FromString,
                    response_serializer=database__pb2.UserResponse.SerializeToString,
            ),
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=database__pb2.User.FromString,
                    response_serializer=database__pb2.UserResponse.SerializeToString,
            ),
            'GetAllUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllUsers,
                    request_deserializer=database__pb2.DBEmpty.FromString,
                    response_serializer=database__pb2.UserResponse.SerializeToString,
            ),
            'GetUserByUserName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserByUserName,
                    request_deserializer=database__pb2.User.FromString,
                    response_serializer=database__pb2.UserResponse.SerializeToString,
            ),
            'CreateDataset': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDataset,
                    request_deserializer=database__pb2.Dataset.FromString,
                    response_serializer=database__pb2.DatasetResp.SerializeToString,
            ),
            'GetDatasetByName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDatasetByName,
                    request_deserializer=database__pb2.Dataset.FromString,
                    response_serializer=database__pb2.DatasetResp.SerializeToString,
            ),
            'RemoveDatasetByName': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveDatasetByName,
                    request_deserializer=database__pb2.Dataset.FromString,
                    response_serializer=database__pb2.DatasetResp.SerializeToString,
            ),
            'GetAllDatasets': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllDatasets,
                    request_deserializer=database__pb2.DBEmpty.FromString,
                    response_serializer=database__pb2.DatasetResp.SerializeToString,
            ),
            'GetDatasetById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDatasetById,
                    request_deserializer=database__pb2.Dataset.FromString,
                    response_serializer=database__pb2.DatasetResp.SerializeToString,
            ),
            'GetAllMetadataID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllMetadataID,
                    request_deserializer=database__pb2.DatabaseEmpty.FromString,
                    response_serializer=database__pb2.MetadataResponse.SerializeToString,
            ),
            'GetDatasetOwner': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDatasetOwner,
                    request_deserializer=database__pb2.Dataset.FromString,
                    response_serializer=database__pb2.UserResponse.SerializeToString,
            ),
            'CreateAPI': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAPI,
                    request_deserializer=database__pb2.API.FromString,
                    response_serializer=database__pb2.APIResp.SerializeToString,
            ),
            'GetAllAPIs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllAPIs,
                    request_deserializer=database__pb2.DBEmpty.FromString,
                    response_serializer=database__pb2.GetAPIResp.SerializeToString,
            ),
            'CreateAPIDependency': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAPIDependency,
                    request_deserializer=database__pb2.APIDependency.FromString,
                    response_serializer=database__pb2.APIDependencyResp.SerializeToString,
            ),
            'GetAllDependencies': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllDependencies,
                    request_deserializer=database__pb2.DBEmpty.FromString,
                    response_serializer=database__pb2.APIDependencyResp.SerializeToString,
            ),
            'CreatePolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePolicy,
                    request_deserializer=database__pb2.Policy.FromString,
                    response_serializer=database__pb2.PolicyResp.SerializeToString,
            ),
            'GetAllPolicies': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllPolicies,
                    request_deserializer=database__pb2.DBEmpty.FromString,
                    response_serializer=database__pb2.PolicyResp.SerializeToString,
            ),
            'CreateDerived': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDerived,
                    request_deserializer=database__pb2.Derived.FromString,
                    response_serializer=database__pb2.DerivedResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Database', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Database(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/CreateUser',
            database__pb2.User.SerializeToString,
            database__pb2.UserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/GetUser',
            database__pb2.User.SerializeToString,
            database__pb2.UserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/GetAllUsers',
            database__pb2.DBEmpty.SerializeToString,
            database__pb2.UserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUserByUserName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/GetUserByUserName',
            database__pb2.User.SerializeToString,
            database__pb2.UserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateDataset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/CreateDataset',
            database__pb2.Dataset.SerializeToString,
            database__pb2.DatasetResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDatasetByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/GetDatasetByName',
            database__pb2.Dataset.SerializeToString,
            database__pb2.DatasetResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveDatasetByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/RemoveDatasetByName',
            database__pb2.Dataset.SerializeToString,
            database__pb2.DatasetResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllDatasets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/GetAllDatasets',
            database__pb2.DBEmpty.SerializeToString,
            database__pb2.DatasetResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDatasetById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/GetDatasetById',
            database__pb2.Dataset.SerializeToString,
            database__pb2.DatasetResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllMetadataID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/GetAllMetadataID',
            database__pb2.DatabaseEmpty.SerializeToString,
            database__pb2.MetadataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDatasetOwner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/GetDatasetOwner',
            database__pb2.Dataset.SerializeToString,
            database__pb2.UserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAPI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/CreateAPI',
            database__pb2.API.SerializeToString,
            database__pb2.APIResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllAPIs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/GetAllAPIs',
            database__pb2.DBEmpty.SerializeToString,
            database__pb2.GetAPIResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAPIDependency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/CreateAPIDependency',
            database__pb2.APIDependency.SerializeToString,
            database__pb2.APIDependencyResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllDependencies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/GetAllDependencies',
            database__pb2.DBEmpty.SerializeToString,
            database__pb2.APIDependencyResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreatePolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/CreatePolicy',
            database__pb2.Policy.SerializeToString,
            database__pb2.PolicyResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllPolicies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/GetAllPolicies',
            database__pb2.DBEmpty.SerializeToString,
            database__pb2.PolicyResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateDerived(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/CreateDerived',
            database__pb2.Derived.SerializeToString,
            database__pb2.DerivedResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
